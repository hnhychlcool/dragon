<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="titan.wms.common.dao.mapper.inside.StocktakingTaskMapper" >
    <resultMap id="BaseResult" type="StocktakingTaskDO" >
        <result column="id" property="id"/>
        <result column="task_code" property="taskCode"/>
        <result column="task_seq" property="taskSeq"/>
        <result column="stocktaking_code" property="stocktakingCode"/>
        <result column="goods_location_code" property="goodsLocationCode"/>
        <result column="goods_location_seq" property="goodsLocationSeq"/>
        <result column="status" property="status"/>
        <result column="stock_user_id" property="stockUserId"/>
        <result column="operator_id" property="operatorId"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>

    <sql id="TableName">
        inside_stocktaking_task
    </sql>

    <sql id="BaseColumn" >
        `task_code`,
        `task_seq`,
        `stocktaking_code`,
        `goods_location_code`,
        `goods_location_seq`,
        `status`,
        `stock_user_id`,
        `operator_id`,
        `create_time`,
        `update_time`
    </sql>

    <insert id="add" parameterType="StocktakingTaskDO" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO
          <include refid="TableName" /> (<include refid="BaseColumn" />)
        VALUES(
          #{taskCode},
          #{taskSeq},
          #{stocktakingCode},
          #{goodsLocationCode},
          #{goodsLocationSeq},
          #{status},
          #{stockUserId},
          #{operatorId},
          NOW(),
          NOW()
        )
    </insert>

    <insert id="batchInsert" parameterType="java.util.List">
        INSERT INTO
        <include refid="TableName" /> (<include refid="BaseColumn" />)
        VALUES
        <foreach collection ="list" item="taskDO" index= "index" separator =",">
            (
            #{taskDO.taskCode},#{taskDO.taskSeq}, #{taskDO.stocktakingCode},
            #{taskDO.goodsLocationCode}, #{taskDO.goodsLocationSeq},
            #{taskDO.status}, #{taskDO.stockUserId},#{taskDO.operatorId}
            NOW(), NOW()
            )
        </foreach >
    </insert>

    <select id="getById" resultMap="BaseResult">
        SELECT
          id, <include refid="BaseColumn" />
        FROM
          <include refid="TableName"/>
        WHERE
          id = #{id}
    </select>

    <select id="getByCode" resultMap="BaseResult">
        SELECT
        id, <include refid="BaseColumn" />
        FROM
        <include refid="TableName"/>
        WHERE
        task_code = #{code}
    </select>

    <delete id="deleteById">
        DELETE
        FROM
          <include refid="TableName"/>
        WHERE
          id = #{id}
    </delete>
    
    <select id="listTaskByStocktakingCodeAndStatus" resultMap="BaseResult">
        SELECT * FROM <include refid="TableName"/> WHERE stocktaking_code = #{queryVO.stocktakingCode}
        <if test="queryVO.status != null">
            and status = #{queryVO.status}
        </if>
         order by goods_location_seq asc <if test="limit != null and limit > 0"> limit #{limit} #{offset}</if>
    </select>

    <select id="countByStocktakingCodeAndStatus" resultType="java.lang.Integer">
        SELECT count(1) FROM <include refid="TableName"/> WHERE stocktaking_code = #{queryVO.stocktakingCode}
        <if test="status != null">
            and status = #{queryVO.status}
        </if>
    </select>

    <update id="updateTaskStatus" >
        UPDATE  <include refid="TableName"/> SET status = #{queryVO.status} where task_code = #{queryVO.taskCode}
    </update>

    <select id="getRightOneByStocktakingCodeAndLocationSeq" resultMap="BaseResult">
        SELECT * FROM  <include refid="TableName"/> WHERE stocktaking_code = #{queryVO.stocktakingCode} and status = #{queryVO.status}
        <![CDATA[ and goods_location_seq < #{queryVO.goodsLocationSeq} ]]> order by goods_location_seq limit 1
    </select>

    <select id="getLeftOneByStocktakingCodeAndLocationSeq" resultMap="BaseResult">
        SELECT * FROM  <include refid="TableName"/> WHERE stocktaking_code = #{queryVO.stocktakingCode} and status = #{queryVO.status}
        <![CDATA[ and goods_location_seq >= #{queryVO.goodsLocationSeq} ]]> order by goods_location_seq desc limit 1
    </select>
</mapper>